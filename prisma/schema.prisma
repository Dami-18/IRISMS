// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // to be added in env file and later as app-level env variable during server deployment
}

// student model
model User {
  id       Int    @id @default(autoincrement())
  username String @unique
  email    String @unique
  password String // stored after hashing

  // firstName String
  // lastName  String
  // contact   String
  // address   String
  // city      String
  // state     String
  // country   String

  // // Academic Information
  // degree      String
  // gradyear    String
  // major       String
  // institution String

  // // File Uploads
  // // url of documents uploaded on cloud storage
  // cvUrl         String?
  // transcriptUrl String? 

  // we can simply add id's of the internships which are accepted, rejected or under review
  // the logic to add these ids will be written in api 
  // accepted Int[]
  // rejected Int[]
  // inReview Int[] 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([username]) // for frequently queried fields to improve performance
}

// model for profs will also be added
model Prof {
  id       Int    @id @default(autoincrement())
  username String @unique
  email    String @unique
  password String

  firstName String
  lastName  String
  contact   String

  website  String?
  gscholar String?

  qualification  String
  degreeYear     String
  specialization String
  institution    String

  teachingExp Float
  researchExp Float

  researchInterns ResearchInternOption @default(MAYBE)

  cvUrl String?

  // this is dynamic array where projects (id) will be added and remove as prof does accordingly
  // then display on dashboard
  // currentProjects Int[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ResearchInternOption {
  YES
  NO
  MAYBE
}

// model for each research internship or project
model Project {
  id            Int      @id @default(autoincrement())
  name          String   @unique
  topics        String[] // will include topics like ML, AI, SDE, etc.
  stipend       String
  duration      Int // in months
  mode          String // remote or onsite
  eligibility   String // eligibility conditions as per by prof
  prerequisites String // any prerequisites or knowledge
  students      Int[] // ids of those students who have already applied for the internship, for prof to see, he will either accept or reject it
}

// create a new model just for internships, it will have id, prof name, stipend, etc.
// then fetch from this table and display it

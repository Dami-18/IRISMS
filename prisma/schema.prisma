// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // to be added in env file and later as app-level env variable during server deployment
}

// student model
model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String    // hashed password
  uid       String    @unique // 'S' + id, for example, S12

  firstName String
  lastName  String
  contact   String?
  address   String?
  city      String?
  state     String?
  country   String?

  // Academic Information
  degree      String?
  gradYear    String?
  major       String?
  institution String?

  // File Uploads
  cvUrl         String? // URL for CV document
  transcriptUrl String? // URL for transcript document

  applications Application[] // Relation to applications submitted by the user
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email,uid,id]) // Index to improve query performance for frequently queried fields
}


// prof model
model Prof {
  id             Int       @id @default(autoincrement())
  email          String    @unique
  password       String    // hashed password
  uid            String    @unique // 'P' + id, for example, P12

  firstName      String
  lastName       String
  contact        String?
  
  website        String?
  gscholar       String?

  qualification   String?
  degreeYear      String?
  specialization  String?
  institution     String?

  teachingExp     Float?   // in years
  researchExp     Float?  

  researchInterns String

  cvUrl           String?

  // Relationships
  projectsCurrent Project[] @relation("CurrentProjects")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Enum for research internship options
enum ResearchInternOption {
  YES
  NO
  MAYBE
}


// model for each research internship or project
model Project {
  id            Int      @id @default(autoincrement())
  name          String   @unique
  facultyName   String // faculty under which research intern is there
  // poc           String // point of contact or supervisor ya phd ke details
  topics        String[] // will include topics like ML, AI, SDE, etc.
  stipend       String
  duration      Int // in months
  mode          String // remote or onsite
  location      String // here include organization name
  eligibility   String // eligibility conditions as per by prof
  prerequisites String // any prerequisites or knowledge
  projectDesc   String

  applications Application[] // Relation to applications for this project

  currentProfId Int?
  currentProf Prof? @relation("CurrentProjects", fields: [currentProfId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Application {
  id         Int      @id @default(autoincrement())
  
  sop        String   // Unique SOP written by the student for this application
  
  userId     Int     // Foreign key linking to the User model
  user       User     @relation(fields: [userId], references: [id])
  
  projectId  Int    // Foreign key linking to the Project model
  project    Project  @relation(fields: [projectId], references: [id])
  
  status     ApplicationStatus? @default(PENDING) // Status of application (enum defined below)

  createdAt DateTime @default(now())
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}


